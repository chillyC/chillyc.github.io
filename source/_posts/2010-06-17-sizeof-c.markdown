---
layout: post
title: "sizeof in c++"
date: 2010-6-17
wordpress_id: 217
comments: true
categories: ["align", "c", "cc", "code", "memory", "sizeof"]
---
<meta name="_edit_last" content="1" />
<meta name="_su_description" content="the inside of sizeof
the inside of memory alignment" />
<meta name="_su_keywords" content="c++, sizeof, double, int, align,memory" />
<meta name="_su_title" content="c++, sizeof, double, int, align,memory" />
<meta name="views" content="1054" />
I use c++ in linux which is gcc version 4.4.1 (Ubuntu 4.4.1-4ubuntu9).

I considered that c++ memory alignment is like the following:


{% codeblock %}// pseudo-code of memory alignment
remove_all_static_varibles();
int max= 0;
foreach(element in struct)
    find_the_max_memory_used(element,&amp;max);
int align = max &gt; default? default: max;
// if max memory used for element is larger than the default, use default.
int memory = sum(memory_used(elements));

if(memory%align != 0)
// here will execute alignment!
{
    memory = (memory/align + 1 )*align;
}
if(memory == 0)
    memory = 1;
return memory;{% endcodeblock %}


vc++ use #pragma_pack(n) set the default.if there are three char in a struct, like:


{% codeblock %}typedef struct{
	char a;
	char b;
	char c;
}X;
sizeof(X); // it will be 3{% endcodeblock %}



{% codeblock %}typedef struct{
	char a;
	short b;

}Y;
sizeof(Y); // here will be 4

typedef struct{
	char a;
	int b;
}Z;

sizeof(Z); // here will be 8{% endcodeblock %}



{% codeblock %}typedef struct{
	double a;
	char b;
}W;
sizeof(W);
// it will be 12, the align is 4
// when the max memory used is larger
// than 4, it will be 4{% endcodeblock %}


if the class or struct is empty, sizeof(it) will be 1.

But if there are static varibles in classes or structs, you can remove it!. like:


{% codeblock %}class A{
	static int a;

};
sizeof(A); // it will be 1{% endcodeblock %}


in class there will be many class functions. But A class is thought as A struct and many functions set. sizeof(A class) will compute the size of struct.


{% codeblock %}class ZZ{
    public:
        ZZ(){
            int a = 3;
            cout &lt;&lt; "I am ZZ"&lt;&lt;endl;
            cout &lt;&lt; a&lt;&lt;endl;
        }
        ~ZZ(){

        }
    int c;
};
sizeof(ZZ); // will be 4;
/* it is like a struct and two member functions.
struct ZZ{
	int c;
};

ZZ@ZZ() is name mingling
ZZ@ZZ(){
	int a = 3;
        cout &lt;&lt; "I am ZZ"&lt;&lt;endl;
        cout &lt;&lt; a&lt;&lt;endl;
}
ZZ@~ZZ(){

}
*/{% endcodeblock %}


but when we meet the virtual member functions and virtual derived class, it will be different.
