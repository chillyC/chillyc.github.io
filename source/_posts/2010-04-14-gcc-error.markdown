---
layout: post
title: "gcc error"
date: 2010-4-14
wordpress_id: 168
comments: true
categories: ["allocate", "array", "big", "cc", "code", "const", "define", "error", "gcc", "see-hear", "warning"]
---
<meta name="_edit_last" content="1" />
<meta name="views" content="890" />
if you use const variable to define an array out of main, like that:


{% codeblock %}#include&lt;stdio.h&gt;

const int MAX= 100010;
char s[MAX];
int main(){

    while(fgets(s,MAX,stdin) != NULL){
        puts(s);
    }
    return 0;

}{% endcodeblock %}


gcc will report : Error: variably modified ‘s’ at file scope. But if you use #define, it will be ok. like that:


{% codeblock %}#include&lt;stdio.h&gt;

#define MAX 100010
char s[MAX];
int main(){

    while(fgets(s,MAX,stdin) != NULL){
        puts(s);
    }
    return 0;

}{% endcodeblock %}


If you do not want to use #define macro, and you will use a small array, you can use a const variable to define the array size, like that:


{% codeblock %}#include&lt;stdio.h&gt;

//#define MAX 100010
//char s[MAX];
int main(){
    const int MAX= 30;
    char s[MAX];
    while(fgets(s,MAX,stdin) != NULL){
        puts(s);
    }
    return 0;

}{% endcodeblock %}


But if you will allocate a big array in main function, gcc will report a warning :warning: overflow in implicit constant conversion
